project(
	'wstroke',
	'c',
	'cpp',
	version: '0.0.1',
	license: 'MIT',
	meson_version: '>=0.51.0',
	default_options: [
		'cpp_std=c++17',
        'c_std=c11',
		'warning_level=2',
		'werror=false',
	],
)

# paths (only needed to install icon and desktop file)
prefix = get_option('prefix')
datadir = join_paths(prefix, get_option('datadir'))
icon_dir = join_paths(datadir, 'icons')
desktop_dir = join_paths(datadir, 'applications')

conf_data = configuration_data()
conf_data.set('DATA_DIR', join_paths(datadir, 'wstroke'))
configure_file(input: 'config.h.in',
               output: 'config.h',
               install: false,
               configuration: conf_data)

# dependencies for loadable plugin
boost    = dependency('boost', modules: ['serialization'], static: false)
wayfire  = dependency('wayfire')
wlroots  = dependency('wlroots')
wlserver = dependency('wayland-server')
glibmm   = dependency('glibmm-2.4')
json     = dependency('nlohmann_json', required: true)

# additional dependencies for GUI
gtkmm    = dependency('gtkmm-3.0')
gdkmm    = dependency('gdkmm-3.0')
glib     = dependency('glib-2.0')
gobject  = dependency('gobject-2.0')
gtk      = dependency('gtk+-3.0')
gdk      = dependency('gdk-3.0')

# resources (GUI layout)
gnome = import('gnome')
econf_res = gnome.compile_resources(
    'ecres', 'resources.xml',
    source_dir: 'data',
    c_name: 'econf'
)


# filesystem library support
# note: on Ubuntu 18.04 this only works with clang++
cpp = meson.get_compiler('cpp')
if cpp.has_link_argument('-lc++fs')
  add_project_link_arguments(['-lc++fs'], language: 'cpp')
elif cpp.has_link_argument('-lc++experimental')
  add_project_link_arguments(['-lc++experimental'], language: 'cpp')
elif cpp.has_link_argument('-lstdc++fs')
  add_project_link_arguments(['-lstdc++fs'], language: 'cpp')
endif


# wayland-scanner -- needed for keyboard grabber and input inhibitor
wayland_client = dependency('wayland-client')
wayland_scanner = find_program('wayland-scanner')

wayland_scanner_code = generator(
	wayland_scanner,
	output: '@BASENAME@-protocol.c',
	arguments: ['private-code', '@INPUT@', '@OUTPUT@'],
)

wayland_scanner_client = generator(
	wayland_scanner,
	output: '@BASENAME@-client-protocol.h',
	arguments: ['client-header', '@INPUT@', '@OUTPUT@'],
)


subdir('input-inhibitor')
subdir('toplevel-grabber')
subdir('example')

# note: this is code generated by Vala, compile it separately to
# silence warnings
cellib = static_library('cellib', 'cellrenderertextish.c',
		dependencies: [glib, gobject, gtk, input_inhibitor_dep],
		c_args: ['-w'])

wconf_sources = ['main.cc', 'actiondb_config.cc', 'actiondb.cc', 'actions.cc',
                 'gesture.cc', 'stroke_draw.cc', 'stroke.c',
                 'convert_keycodes.cc', 'stroke_drawing_area.cpp', econf_res]
wconf = executable('wstroke-config', wconf_sources,
        dependencies: [gtkmm, gdkmm, boost, protos, input_inhibitor_dep, toplevel_grabber_dep],
        install: true,
        cpp_args: ['-DACTIONDB_CONVERT_CODES', '-DWLR_USE_UNSTABLE'],
        link_with: cellib)


wslib_sources = ['easystroke_gestures.cpp', 'input_events.cpp', 'actiondb.cc', 'actiondb_plugin.cc', 'gesture.cc', 'stroke.c']
wslib = shared_module('wstroke', wslib_sources,
    dependencies: [wayfire, wlroots, wlserver, boost, glibmm, json],
    install: true,
    install_dir: wayfire.get_variable(pkgconfig: 'plugindir'),
    cpp_args: ['-Wno-unused-parameter', '-Wno-format-security','-DWAYFIRE_PLUGIN', '-DWLR_USE_UNSTABLE'],
    link_args: '-rdynamic')
    

install_data('wstroke.xml', install_dir: wayfire.get_variable(pkgconfig: 'metadatadir'))
install_data('wstroke-config.desktop', install_dir: desktop_dir)
subdir('icons')
